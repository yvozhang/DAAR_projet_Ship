/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Main, MainInterface } from "../Main";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "Registered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "width",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "height",
        type: "uint256",
      },
    ],
    name: "Size",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "ship",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "Touched",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "ship",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "turn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060326000600101819055506032600080018190555060016005819055507f35f04ed6194f6a369eadbe3aa1fb1f1ff53632354ec619e0f44171e2ed778814600060010154600080015460405161006892919061008e565b60405180910390a16100b7565b6000819050919050565b61008881610075565b82525050565b60006040820190506100a3600083018561007f565b6100b0602083018461007f565b9392505050565b610dc8806100c66000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634420e4861461003b5780638b29990314610057575b600080fd5b61005560048036038101906100509190610937565b610061565b005b61005f610446565b005b6002600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054106100e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100da906109c1565b60405180910390fd5b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016790610a2d565b60405180910390fd5b60006001015460008001546101859190610a86565b60055411156101c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c090610b2c565b60405180910390fd5b6001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102199190610b4c565b925050819055508060076000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360086000600554815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000806102d66005546106ef565b9150915060076000600554815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632fb565e883836040518363ffffffff1660e01b815260040161034a929190610b8f565b600060405180830381600087803b15801561036457600080fd5b505af1158015610378573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166005547f034fa8f7fa4b2f92c7072db23c9f92f9636df28e929271c9a6f391618a11f8ff84846040516103c7929190610b8f565b60405180910390a36001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600082825461043a9190610b4c565b92505081905550505050565b600060055467ffffffffffffffff81111561046457610463610bb8565b5b6040519080825280602002602001820160405280156104925781602001602082028036833780820191505090505b5090506000600190505b60055481101561060757600080600301600083815260200190815260200160002054126105f45760006007600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff1663457094cc6040518163ffffffff1660e01b815260040160408051808303816000875af115801561054a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056e9190610c13565b91509150600080600201600084815260200190815260200160002060008381526020019081526020016000205411156105f05760018560006002016000858152602001908152602001600020600084815260200190815260200160002054815181106105dd576105dc610c53565b5b6020026020010190151590811515815250505b5050505b80806105ff90610c82565b91505061049c565b5060005b6005548110156106eb5781818151811061062857610627610c53565b5b6020026020010151156106d8577fc68e408533253db32d9865e2691eae2152ba117f47370b809db0c9ed1eb71da0816000600301600084815260200190815260200160002054600060040160008581526020019081526020016000205460405161069493929190610cca565b60405180910390a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60006003016000838152602001908152602001600020819055505b80806106e390610c82565b91505061060b565b5050565b60008060006007600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000808273ffffffffffffffffffffffffffffffffffffffff166312789b5b60006001015460008001546040518363ffffffff1660e01b8152600401610771929190610b8f565b60408051808303816000875af115801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b39190610c13565b915091506000600190505b80156108c55760008060020160008581526020019081526020016000206000848152602001908152602001600020540361085d578660006002016000858152602001908152602001600020600084815260200190815260200160002081905550826000600301600089815260200190815260200160002081905550816000600401600089815260200190815260200160002081905550600090506108c0565b6000600183600060010154866108739190610a86565b61087d9190610b4c565b6108879190610b4c565b90506000600101548161089a9190610d30565b93506000800154600060010154826108b29190610d61565b6108bc9190610d30565b9250505b6107be565b82829550955050505050915091565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610904826108d9565b9050919050565b610914816108f9565b811461091f57600080fd5b50565b6000813590506109318161090b565b92915050565b60006020828403121561094d5761094c6108d4565b5b600061095b84828501610922565b91505092915050565b600082825260208201905092915050565b7f4f6e6c792074776f207368697073000000000000000000000000000000000000600082015250565b60006109ab600e83610964565b91506109b682610975565b602082019050919050565b600060208201905081810360008301526109da8161099e565b9050919050565b7f5368697020616c72656164206f6e2074686520626f6172640000000000000000600082015250565b6000610a17601883610964565b9150610a22826109e1565b602082019050919050565b60006020820190508181036000830152610a4681610a0a565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a9182610a4d565b9150610a9c83610a4d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ad557610ad4610a57565b5b828202905092915050565b7f546f6f206d7563682073686970206f6e20626f61726400000000000000000000600082015250565b6000610b16601683610964565b9150610b2182610ae0565b602082019050919050565b60006020820190508181036000830152610b4581610b09565b9050919050565b6000610b5782610a4d565b9150610b6283610a4d565b9250828201905080821115610b7a57610b79610a57565b5b92915050565b610b8981610a4d565b82525050565b6000604082019050610ba46000830185610b80565b610bb16020830184610b80565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bf081610a4d565b8114610bfb57600080fd5b50565b600081519050610c0d81610be7565b92915050565b60008060408385031215610c2a57610c296108d4565b5b6000610c3885828601610bfe565b9250506020610c4985828601610bfe565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610c8d82610a4d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cbf57610cbe610a57565b5b600182019050919050565b6000606082019050610cdf6000830186610b80565b610cec6020830185610b80565b610cf96040830184610b80565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610d3b82610a4d565b9150610d4683610a4d565b925082610d5657610d55610d01565b5b828206905092915050565b6000610d6c82610a4d565b9150610d7783610a4d565b925082610d8757610d86610d01565b5b82820490509291505056fea2646970667358221220bd31d87a40d9dec873a395f925ae53b3d13ae5b0388af3b3ebd6bb07f2033faf64736f6c63430008100033";

type MainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Main__factory extends ContractFactory {
  constructor(...args: MainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Main> {
    return super.deploy(overrides || {}) as Promise<Main>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Main {
    return super.attach(address) as Main;
  }
  override connect(signer: Signer): Main__factory {
    return super.connect(signer) as Main__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MainInterface {
    return new utils.Interface(_abi) as MainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Main {
    return new Contract(address, _abi, signerOrProvider) as Main;
  }
}
